#include "stdio.h"
int len=0;
int len2=0;
int son=0;
int len_sum=0;
#define INVALIDNUMBER 0

void swapArray(int degrees[],int i1, int i2)
{
    int c = degrees[i1];
    degrees[i1]= degrees[i2];
    degrees[i2]= c;
}

void swapArrayCo(double coefficients[],int i1, int i2)
{
    double c = coefficients[i1];
    coefficients[i1]= coefficients[i2];
    coefficients[i2]= c;
}

int findMinimum(int degrees[], int left, int right) {
    int min = left;

    for (int i = left+1; i <right ; i++) {
        if (degrees[min]>degrees[i])
            min= i;
    }
    return min;
}

void sort(int degrees[], int len, double coefficients[])
{
    for (int i = 0; i < len - 1; ++i) {
        int minIndex = findMinimum(degrees,i,len);
        swapArray(degrees,i,minIndex);
        swapArrayCo(coefficients,i,minIndex);
    }
}

void sort1(int degrees[], int len_sum, double coefficients[])
{
    for (int i = 0; i < len_sum ; ++i) { //-1 i sildim
        int minIndex = findMinimum(degrees,i,len_sum);
        swapArray(degrees,i,minIndex);
        swapArrayCo(coefficients,i,minIndex);
    }
}

void hasDuplicates(int arr[],int len) {
    for (int f1 = 0; f1 < len; ++f1) {
        for (int f2 = f1 + 1; f2 < len; ++f2) {
            if (arr[f1] == arr[f2])
            {arr[f2]=INVALIDNUMBER;}
        }
    }
}

void readPolynomial(double coefficients[],int degrees[]) {
    for (int i = 0; i < 20; i++) {
        printf("Write coefficients");
        scanf("%lf", &coefficients[i]);
        len++;
        if(coefficients[i]==0)
        {break;}
        else
            printf("Write degrees");
        scanf("%d", &degrees[i]);

        sort(degrees,len,coefficients);
    }
    len_sum+=len;
    //son arrayin uzunluÄŸu
    len2=len;
}

void printPolynomial( double coefficients[], int degrees[] ) {
    if(son!=2){
        readPolynomial(coefficients, degrees); }
    son++;
    for (int i = len-1; i>=0; i--) {
        if(i==len-2 && coefficients[i] > 0 )
        {
            if (degrees[i] == 1  && coefficients[i]!=1 ) { printf("%.0fx", coefficients[i]); }else
            if (degrees[i]==0 && coefficients[i] !=1  ) { printf("%.0f", coefficients[i]); } else
            if (coefficients[i] ==1 && degrees[i]!=0 && degrees[i]!=1) { printf("x^%d", degrees[i]); } else
            if(coefficients[i] ==1 && degrees[i]==0 ) {printf("1");} else
            if(coefficients[i]==1 && degrees[i]==1) {
                printf("x");} else
                printf("%.0fx^%d",coefficients[i],degrees[i]);
        }
        if (coefficients[i] > 0 && i!=len-2) {
            if (degrees[i] == 1  && coefficients[i]!=1 ) { printf("+%.0fx", coefficients[i]); }else
            if (degrees[i]==0 && coefficients[i] !=1  ) { printf("+%.0f", coefficients[i]); } else
            if (coefficients[i] ==1 && degrees[i]!=0 && degrees[i]!=1) { printf("+x^%d", degrees[i]); } else
            if(coefficients[i] ==1 && degrees[i]==0 ) {printf("+1");} else
            if(coefficients[i]==1 && degrees[i]==1) {
                printf("+x");} else
                printf("+%.0fx^%d",coefficients[i],degrees[i]);
        }
        if (coefficients[i] < 0)
        {
            if (degrees[i] == 1 && coefficients[i]!=-1) { printf("%.0fx", coefficients[i]); }else
            if (degrees[i] == 0 && coefficients[i]!=-1) { printf("%.0f", coefficients[i]); }else
            if(degrees[i]==0 && coefficients[i]==-1) {printf("-1");}else
            if(coefficients[i]==-1 && degrees[i]!=1)
            {printf("-x^%d",degrees[i]);} else
            if(degrees[i] == 1 && coefficients[i]==-1)
            {printf("-x");}else
                printf("%.0fx^%d",coefficients[i],degrees[i]);
        }
    }
    printf("\n"); len=0;
}

void printPolynomial1( double coefficients[], int degrees[] ) {
    for (int i = len_sum-1; i>=0; i--) {

        if (coefficients[i] > 0) {
            if(i!=len_sum-2) {
            printf("+"); }
            if(coefficients[i]==0){ printf("");}else
            if (degrees[i] == 1  && coefficients[i]!=1 && coefficients[i]!=INVALIDNUMBER) { printf("%.0fx", coefficients[i]); }else
            if (degrees[i]==0 && coefficients[i] !=1 && coefficients[i]!=INVALIDNUMBER) { printf("%.0f", coefficients[i]); } else
            if (coefficients[i] ==1 && degrees[i]!=0 && degrees[i]!=1 && degrees[i]!=INVALIDNUMBER) { printf("x^%d", degrees[i]); } else
            if(coefficients[i] ==1 && degrees[i]==0) {printf("1");}
            else if(coefficients[i]==INVALIDNUMBER) { printf("");}else
            if(degrees[i]==INVALIDNUMBER)   printf(""); else
            if(degrees[i] == 1 && coefficients[i]==1)
            {printf("x");} else
            { printf("%.0fx^%d",coefficients[i],degrees[i]);}
        }

        if (coefficients[i] < 0)
        {
            if (degrees[i] == 1 && coefficients[i]!=-1) { printf("%.0fx", coefficients[i]); }else
            if (degrees[i] == 0 && coefficients[i]!=-1) { printf("%.0f", coefficients[i]); }else
            if(degrees[i]==0 && coefficients[i]==-1) {printf("-1");}else
            if(coefficients[i]==-1 && degrees[i]!=1)
            {printf("-x^%d",degrees[i]);} else
            if(degrees[i] == 1 && coefficients[i]==-1)
            {printf("-x");}else
            if(degrees[i]==INVALIDNUMBER)   printf("");else
            {printf("%.0fx^%d",coefficients[i],degrees[i]);}
        }
    }
    printf("\n"); len_sum=0;
}

void addPolynomials(double c1[], int d1[], double c2[], int d2[], double c3[], int d3[],double c4[]) {
    
    printf("First Polynomial\n");
    printPolynomial(c1, d1);
    printf("\nSecond Polynomial\n");
    printPolynomial(c2, d2);
    for (int i = 0; i < len_sum - len2 ; i++) {
        c4[i] = c1[i];
    }
    for (int i = 0; i < len2; i++) {
        c4[len_sum - len2+i] = c2[i];
    }

    for (int i = 0; i < len_sum - len2 ; i++) {
        d3[i] = d1[i];
    }

    for (int i = 0; i < len2; i++) {
        d3[len_sum - len2+i] = d2[i];
    }

    for (int i = 0; i < len_sum; ++i) {
        for (int j = i + 1; j < len_sum ; ++j) {
            if (d3[i] == d3[j]) {
                c4[i] = c4[i] + c4[j];
                c4[j]=INVALIDNUMBER;
            }
        }
    }
    hasDuplicates(d3, len_sum);
    for (int i = 0; i < len_sum; ++i) {
        c3[i] = c4[i];
    }

    sort1(d3, len_sum, c3);
    printf("\nSum of the Polynomials:\n");
    printPolynomial1(c3, d3);
}

int main ()
{
    double c1[20];
    double c2[20];
    double c3[20];
    double c4[20];
    int d1[20];
    int d2[20];
    int d3[20];

    addPolynomials(c1,d1,c2,d2,c3,d3,c4);
}
